security:
    encoders:
        Symfony\Component\Security\Core\User\User: plaintext
        #stas user bunctionality
        FOS\UserBundle\Model\UserInterface: sha512
    
    acl:
        connection: default
    
    role_hierarchy:
        ROLE_ADMIN:       [ROLE_USER, ROLE_SONATA_ADMIN]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH, ROLE_BLOG_ADMIN]
        #ROLE_SUPER_ADMIN: [ROLE_USER, ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
        SONATA:
         #   - ROLE_SONATA_PAGE_ADMIN_PAGE_EDIT  # if you are using acl then this line must be commented

    providers:
     #stas user bunctionality comment
        in_memory:
            memory:
                users:
                    user:  { password: userpass, roles: [ 'ROLE_USER' ] }
                    admin: { password: adminpass, roles: [ 'ROLE_ADMIN' ] }
                    #stas my static users
                    stas:  { password: 123456, roles: [ 'ROLE_USER' ] }
        #stas user bunctionality
        fos_userbundle:
            id: fos_user.user_manager

    firewalls:
        #stas user bunctionality
        admin:
            pattern:            /admin(.*)
            context:            user
            form_login:
                provider:       fos_userbundle
                login_path:     /admin/login
                use_forward:    false
                check_path:     /admin/login_check
                failure_path:   null
            logout:
                path:           /admin/logout
            anonymous:          true
        main:
            pattern:    ^/
            context:    user
            form_login:
                provider:     fos_userbundle
                login_path:   sonata_user_admin_security_login
                use_forward:  false
                check_path:   sonata_user_admin_security_check
                failure_path: null
              #  csrf_provider: form.csrf_provider
            logout:       true
            anonymous:    true

        api:
            pattern:    ^/apimanual
            fos_oauth:  true
            stateless:  true
            anonymous:  false # can be omitted as its default value

        oauth_token:
            pattern:    ^/oauth/v2/token
            security:   false

        oauth_authorize:
            pattern:    ^/oauth/v2/auth
            form_login:
                provider:       fos_userbundle
                login_path:     sonata_user_security_login
                check_path:     sonata_user_security_check
            anonymous: true

         # pattern:             .*
         #   context:             user
         #   form_login:
         #       provider:       fos_userbundle
         #       login_path:     /login
         #       use_forward:    false
         #       check_path:     /login_check
         #       failure_path:   null
         #   logout:             true
         #   anonymous:          true
        #commented
        dev:
            pattern:  ^/(_(profiler|wdt)|css|images|js)/
            security: false
#
 #       login:
  #          pattern:  ^/demo/secured/login$
   #         security: false
#
 #       secured_area:
  #          pattern:    ^/demo/secured/
   #         form_login:
    #            check_path: _security_check
     #           login_path: _demo_login
      #      logout:
       #         path:   _demo_logout
        #        target: _demo
        #end stas user bunctionality        
            #anonymous: ~
            #http_basic:
            #    realm: "Secured Demo Area"

    access_control:
        #- { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }
        #stas user bunctionality
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/login_check, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
         # Admin login page needs to be access without credential
        - { path: ^/admin/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/logout$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/login_check$, role: IS_AUTHENTICATED_ANONYMOUSLY }

        # Secured part of the site
        # This config requires being logged for the whole site and having the admin role for the admin part.
        # Change these rules to adapt them to your needs
        - { path: ^/admin/, role: [ROLE_ADMIN, ROLE_SONATA_ADMIN] }
        
        - { path: ^/demo/post/new, role: ROLE_BLOG_ADMIN }
        - { path: ^/demo/post/.*/edit, role: ROLE_BLOG_ADMIN }
        
        - { path: ^/.*, role: IS_AUTHENTICATED_ANONYMOUSLY }
        

        